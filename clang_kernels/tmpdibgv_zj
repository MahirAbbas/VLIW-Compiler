
void r_1152_5_7_7_5(float* restrict data0, float* restrict data1, float* restrict data2, float* restrict data3, float* restrict data4, float* restrict data5, float* restrict data6) {
  for (int ridx0 = 0; ridx0 < 1152; ridx0++) {
    int alu0 = (ridx0*49);
    float acc0 = 0.0f;
    float acc1 = 0.0f;
    float acc2 = 0.0f;
    float acc3 = 0.0f;
    float acc4 = 0.0f;
    float acc5 = 0.0f;
    float acc6 = 0.0f;
    float acc7 = 0.0f;
    float acc8 = 0.0f;
    float acc9 = 0.0f;
    float acc10 = 0.0f;
    float acc11 = 0.0f;
    float acc12 = 0.0f;
    float acc13 = 0.0f;
    float acc14 = 0.0f;
    float acc15 = 0.0f;
    float acc16 = 0.0f;
    float acc17 = 0.0f;
    float acc18 = 0.0f;
    float acc19 = 0.0f;
    float acc20 = 0.0f;
    float acc21 = 0.0f;
    float acc22 = 0.0f;
    float acc23 = 0.0f;
    float acc24 = 0.0f;
    float acc25 = 0.0f;
    float acc26 = 0.0f;
    float acc27 = 0.0f;
    float acc28 = 0.0f;
    float acc29 = 0.0f;
    float acc30 = 0.0f;
    float acc31 = 0.0f;
    float acc32 = 0.0f;
    float acc33 = 0.0f;
    float acc34 = 0.0f;
    float acc35 = 0.0f;
    float acc36 = 0.0f;
    float acc37 = 0.0f;
    float acc38 = 0.0f;
    float acc39 = 0.0f;
    float acc40 = 0.0f;
    float acc41 = 0.0f;
    float acc42 = 0.0f;
    float acc43 = 0.0f;
    float acc44 = 0.0f;
    float acc45 = 0.0f;
    float acc46 = 0.0f;
    float acc47 = 0.0f;
    float acc48 = 0.0f;
    for (int ridx1 = 0; ridx1 < 5; ridx1++) {
      int alu1 = ((ridx1*7)+alu0);
      int alu2 = (ridx0+(ridx1*5760));
      _Bool alu3 = (ridx1<3);
      _Bool alu4 = (ridx1<4);
      _Bool alu5 = ((ridx1<1)!=1);
      _Bool alu6 = ((ridx1<2)!=1);
      float val0 = (alu6?*(data1+alu1+-14):0.0f);
      float val1 = (alu6?*(data1+alu1+-13):0.0f);
      float val2 = (alu6?*(data1+alu1+-12):0.0f);
      float val3 = (alu6?*(data1+alu1+-11):0.0f);
      float val4 = (alu6?*(data1+alu1+-10):0.0f);
      float val5 = (alu6?*(data1+alu1+-9):0.0f);
      float val6 = (alu6?*(data1+alu1+-8):0.0f);
      float val7 = (alu5?*(data1+alu1+-7):0.0f);
      float val8 = (alu5?*(data1+alu1+-6):0.0f);
      float val9 = (alu5?*(data1+alu1+-5):0.0f);
      float val10 = (alu5?*(data1+alu1+-4):0.0f);
      float val11 = (alu5?*(data1+alu1+-3):0.0f);
      float val12 = (alu5?*(data1+alu1+-2):0.0f);
      float val13 = (alu5?*(data1+alu1+-1):0.0f);
      float val14 = *(data1+alu1+1);
      float val15 = *(data1+alu1+2);
      float val16 = *(data1+alu1+3);
      float val17 = *(data1+alu1+4);
      float val18 = *(data1+alu1+5);
      float val19 = *(data1+alu1+6);
      float val20 = *(data1+alu1+7);
      float val21 = *(data1+alu1+8);
      float val22 = *(data1+alu1+9);
      float val23 = *(data1+alu1+10);
      float val24 = *(data1+alu1+11);
      float val25 = *(data1+alu1+12);
      float val26 = *(data1+alu1+13);
      float val27 = *(data1+alu1+14);
      float val28 = *(data1+alu1+15);
      float val29 = *(data1+alu1+16);
      float val30 = *(data1+alu1+17);
      float val31 = *(data1+alu1+18);
      float val32 = *(data1+alu1+19);
      float val33 = *(data1+alu1+20);
      float val34 = (alu4?*(data1+alu1+21):0.0f);
      float val35 = (alu4?*(data1+alu1+22):0.0f);
      float val36 = (alu4?*(data1+alu1+23):0.0f);
      float val37 = (alu4?*(data1+alu1+24):0.0f);
      float val38 = (alu4?*(data1+alu1+25):0.0f);
      float val39 = (alu4?*(data1+alu1+26):0.0f);
      float val40 = (alu4?*(data1+alu1+27):0.0f);
      float val41 = (alu3?*(data1+alu1+28):0.0f);
      float val42 = (alu3?*(data1+alu1+29):0.0f);
      float val43 = (alu3?*(data1+alu1+30):0.0f);
      float val44 = (alu3?*(data1+alu1+31):0.0f);
      float val45 = (alu3?*(data1+alu1+32):0.0f);
      float val46 = (alu3?*(data1+alu1+33):0.0f);
      float val47 = (alu3?*(data1+alu1+34):0.0f);
      float val48 = *(data1+alu1);
      float val49 = *(data2+alu2+1152);
      float val50 = *(data2+alu2+2304);
      float val51 = *(data2+alu2+3456);
      float val52 = *(data2+alu2+4608);
      acc0 = (acc0+(val0*val50)+(val1*val51)+(val2*val52));
      acc1 = (acc1+(val7*val50)+(val8*val51)+(val9*val52));
      acc2 = (acc2+(val48*val50)+(val14*val51)+(val15*val52));
      acc3 = (acc3+(val20*val50)+(val21*val51)+(val22*val52));
      acc4 = (acc4+(val27*val50)+(val28*val51)+(val29*val52));
      acc5 = (acc5+(val34*val50)+(val35*val51)+(val36*val52));
      acc6 = (acc6+(val41*val50)+(val42*val51)+(val43*val52));
      acc7 = (acc7+(val0*val49)+(val1*val50)+(val2*val51)+(val3*val52));
      acc8 = (acc8+(val7*val49)+(val8*val50)+(val9*val51)+(val10*val52));
      acc9 = (acc9+(val48*val49)+(val14*val50)+(val15*val51)+(val16*val52));
      acc10 = (acc10+(val20*val49)+(val21*val50)+(val22*val51)+(val23*val52));
      acc11 = (acc11+(val27*val49)+(val28*val50)+(val29*val51)+(val30*val52));
      acc12 = (acc12+(val34*val49)+(val35*val50)+(val36*val51)+(val37*val52));
      acc13 = (acc13+(val41*val49)+(val42*val50)+(val43*val51)+(val44*val52));
      float val53 = *(data2+alu2);
      acc14 = (acc14+(val0*val53)+(val1*val49)+(val2*val50)+(val3*val51)+(val4*val52));
      acc15 = (acc15+(val7*val53)+(val8*val49)+(val9*val50)+(val10*val51)+(val11*val52));
      acc16 = (acc16+(val48*val53)+(val14*val49)+(val15*val50)+(val16*val51)+(val17*val52));
      acc17 = (acc17+(val20*val53)+(val21*val49)+(val22*val50)+(val23*val51)+(val24*val52));
      acc18 = (acc18+(val27*val53)+(val28*val49)+(val29*val50)+(val30*val51)+(val31*val52));
      acc19 = (acc19+(val34*val53)+(val35*val49)+(val36*val50)+(val37*val51)+(val38*val52));
      acc20 = (acc20+(val41*val53)+(val42*val49)+(val43*val50)+(val44*val51)+(val45*val52));
      acc21 = (acc21+(val1*val53)+(val2*val49)+(val3*val50)+(val4*val51)+(val5*val52));
      acc22 = (acc22+(val8*val53)+(val9*val49)+(val10*val50)+(val11*val51)+(val12*val52));
      acc23 = (acc23+(val14*val53)+(val15*val49)+(val16*val50)+(val17*val51)+(val18*val52));
      acc24 = (acc24+(val21*val53)+(val22*val49)+(val23*val50)+(val24*val51)+(val25*val52));
      acc25 = (acc25+(val28*val53)+(val29*val49)+(val30*val50)+(val31*val51)+(val32*val52));
      acc26 = (acc26+(val35*val53)+(val36*val49)+(val37*val50)+(val38*val51)+(val39*val52));
      acc27 = (acc27+(val42*val53)+(val43*val49)+(val44*val50)+(val45*val51)+(val46*val52));
      acc28 = (acc28+(val2*val53)+(val3*val49)+(val4*val50)+(val5*val51)+(val6*val52));
      acc29 = (acc29+(val9*val53)+(val10*val49)+(val11*val50)+(val12*val51)+(val13*val52));
      acc30 = (acc30+(val15*val53)+(val16*val49)+(val17*val50)+(val18*val51)+(val19*val52));
      acc31 = (acc31+(val22*val53)+(val23*val49)+(val24*val50)+(val25*val51)+(val26*val52));
      acc32 = (acc32+(val29*val53)+(val30*val49)+(val31*val50)+(val32*val51)+(val33*val52));
      acc33 = (acc33+(val36*val53)+(val37*val49)+(val38*val50)+(val39*val51)+(val40*val52));
      acc34 = (acc34+(val43*val53)+(val44*val49)+(val45*val50)+(val46*val51)+(val47*val52));
      acc35 = (acc35+(val3*val53)+(val4*val49)+(val5*val50)+(val6*val51));
      acc36 = (acc36+(val10*val53)+(val11*val49)+(val12*val50)+(val13*val51));
      acc37 = (acc37+(val16*val53)+(val17*val49)+(val18*val50)+(val19*val51));
      acc38 = (acc38+(val23*val53)+(val24*val49)+(val25*val50)+(val26*val51));
      acc39 = (acc39+(val30*val53)+(val31*val49)+(val32*val50)+(val33*val51));
      acc40 = (acc40+(val37*val53)+(val38*val49)+(val39*val50)+(val40*val51));
      acc41 = (acc41+(val44*val53)+(val45*val49)+(val46*val50)+(val47*val51));
      acc42 = (acc42+(val4*val53)+(val5*val49)+(val6*val50));
      acc43 = (acc43+(val11*val53)+(val12*val49)+(val13*val50));
      acc44 = (acc44+(val17*val53)+(val18*val49)+(val19*val50));
      acc45 = (acc45+(val24*val53)+(val25*val49)+(val26*val50));
      acc46 = (acc46+(val31*val53)+(val32*val49)+(val33*val50));
      acc47 = (acc47+(val38*val53)+(val39*val49)+(val40*val50));
      acc48 = (acc48+(val45*val53)+(val46*val49)+(val47*val50));
    }
    float val54 = *(data3+ridx0);
    float val55 = *(data4+ridx0);
    float val56 = *(data5+ridx0);
    float alu7 = __builtin_sqrtf((1/(val56+1e-05f)));
    float val57 = *(data6+ridx0);
    *(data0+alu0+1) = (((acc7-val54)*val55*alu7)+val57);
    *(data0+alu0+2) = (((acc14-val54)*val55*alu7)+val57);
    *(data0+alu0+3) = (((acc21-val54)*val55*alu7)+val57);
    *(data0+alu0+4) = (((acc28-val54)*val55*alu7)+val57);
    *(data0+alu0+5) = (((acc35-val54)*val55*alu7)+val57);
    *(data0+alu0+6) = (((acc42-val54)*val55*alu7)+val57);
    *(data0+alu0+7) = (((acc1-val54)*val55*alu7)+val57);
    *(data0+alu0+8) = (((acc8-val54)*val55*alu7)+val57);
    *(data0+alu0+9) = (((acc15-val54)*val55*alu7)+val57);
    *(data0+alu0+10) = (((acc22-val54)*val55*alu7)+val57);
    *(data0+alu0+11) = (((acc29-val54)*val55*alu7)+val57);
    *(data0+alu0+12) = (((acc36-val54)*val55*alu7)+val57);
    *(data0+alu0+13) = (((acc43-val54)*val55*alu7)+val57);
    *(data0+alu0+14) = (((acc2-val54)*val55*alu7)+val57);
    *(data0+alu0+15) = (((acc9-val54)*val55*alu7)+val57);
    *(data0+alu0+16) = (((acc16-val54)*val55*alu7)+val57);
    *(data0+alu0+17) = (((acc23-val54)*val55*alu7)+val57);
    *(data0+alu0+18) = (((acc30-val54)*val55*alu7)+val57);
    *(data0+alu0+19) = (((acc37-val54)*val55*alu7)+val57);
    *(data0+alu0+20) = (((acc44-val54)*val55*alu7)+val57);
    *(data0+alu0+21) = (((acc3-val54)*val55*alu7)+val57);
    *(data0+alu0+22) = (((acc10-val54)*val55*alu7)+val57);
    *(data0+alu0+23) = (((acc17-val54)*val55*alu7)+val57);
    *(data0+alu0+24) = (((acc24-val54)*val55*alu7)+val57);
    *(data0+alu0+25) = (((acc31-val54)*val55*alu7)+val57);
    *(data0+alu0+26) = (((acc38-val54)*val55*alu7)+val57);
    *(data0+alu0+27) = (((acc45-val54)*val55*alu7)+val57);
    *(data0+alu0+28) = (((acc4-val54)*val55*alu7)+val57);
    *(data0+alu0+29) = (((acc11-val54)*val55*alu7)+val57);
    *(data0+alu0+30) = (((acc18-val54)*val55*alu7)+val57);
    *(data0+alu0+31) = (((acc25-val54)*val55*alu7)+val57);
    *(data0+alu0+32) = (((acc32-val54)*val55*alu7)+val57);
    *(data0+alu0+33) = (((acc39-val54)*val55*alu7)+val57);
    *(data0+alu0+34) = (((acc46-val54)*val55*alu7)+val57);
    *(data0+alu0+35) = (((acc5-val54)*val55*alu7)+val57);
    *(data0+alu0+36) = (((acc12-val54)*val55*alu7)+val57);
    *(data0+alu0+37) = (((acc19-val54)*val55*alu7)+val57);
    *(data0+alu0+38) = (((acc26-val54)*val55*alu7)+val57);
    *(data0+alu0+39) = (((acc33-val54)*val55*alu7)+val57);
    *(data0+alu0+40) = (((acc40-val54)*val55*alu7)+val57);
    *(data0+alu0+41) = (((acc47-val54)*val55*alu7)+val57);
    *(data0+alu0+42) = (((acc6-val54)*val55*alu7)+val57);
    *(data0+alu0+43) = (((acc13-val54)*val55*alu7)+val57);
    *(data0+alu0+44) = (((acc20-val54)*val55*alu7)+val57);
    *(data0+alu0+45) = (((acc27-val54)*val55*alu7)+val57);
    *(data0+alu0+46) = (((acc34-val54)*val55*alu7)+val57);
    *(data0+alu0+47) = (((acc41-val54)*val55*alu7)+val57);
    *(data0+alu0+48) = (((acc48-val54)*val55*alu7)+val57);
    *(data0+alu0) = (((acc0-val54)*val55*alu7)+val57);
  }
}