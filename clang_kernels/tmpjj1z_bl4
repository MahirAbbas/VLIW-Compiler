
void r_672_5_7_7_5(float* restrict data0, float* restrict data1, float* restrict data2, float* restrict data3, float* restrict data4, float* restrict data5, float* restrict data6) {
  for (int ridx0 = 0; ridx0 < 672; ridx0++) {
    int alu0 = (ridx0*49);
    float acc0 = 0.0f;
    float acc1 = 0.0f;
    float acc2 = 0.0f;
    float acc3 = 0.0f;
    float acc4 = 0.0f;
    float acc5 = 0.0f;
    float acc6 = 0.0f;
    float acc7 = 0.0f;
    float acc8 = 0.0f;
    float acc9 = 0.0f;
    float acc10 = 0.0f;
    float acc11 = 0.0f;
    float acc12 = 0.0f;
    float acc13 = 0.0f;
    float acc14 = 0.0f;
    float acc15 = 0.0f;
    float acc16 = 0.0f;
    float acc17 = 0.0f;
    float acc18 = 0.0f;
    float acc19 = 0.0f;
    float acc20 = 0.0f;
    float acc21 = 0.0f;
    float acc22 = 0.0f;
    float acc23 = 0.0f;
    float acc24 = 0.0f;
    float acc25 = 0.0f;
    float acc26 = 0.0f;
    float acc27 = 0.0f;
    float acc28 = 0.0f;
    float acc29 = 0.0f;
    float acc30 = 0.0f;
    float acc31 = 0.0f;
    float acc32 = 0.0f;
    float acc33 = 0.0f;
    float acc34 = 0.0f;
    float acc35 = 0.0f;
    float acc36 = 0.0f;
    float acc37 = 0.0f;
    float acc38 = 0.0f;
    float acc39 = 0.0f;
    float acc40 = 0.0f;
    float acc41 = 0.0f;
    float acc42 = 0.0f;
    float acc43 = 0.0f;
    float acc44 = 0.0f;
    float acc45 = 0.0f;
    float acc46 = 0.0f;
    float acc47 = 0.0f;
    float acc48 = 0.0f;
    for (int ridx1 = 0; ridx1 < 5; ridx1++) {
      int alu1 = ((ridx1*14)+(ridx0*196));
      int alu2 = (ridx0+(ridx1*3360));
      _Bool alu3 = (ridx1<3);
      _Bool alu4 = ((ridx1<1)!=1);
      float val0 = (alu4?*(data1+alu1+-14):0.0f);
      float val1 = (alu4?*(data1+alu1+-13):0.0f);
      float val2 = (alu4?*(data1+alu1+-12):0.0f);
      float val3 = (alu4?*(data1+alu1+-11):0.0f);
      float val4 = (alu4?*(data1+alu1+-10):0.0f);
      float val5 = (alu4?*(data1+alu1+-9):0.0f);
      float val6 = (alu4?*(data1+alu1+-8):0.0f);
      float val7 = (alu4?*(data1+alu1+-7):0.0f);
      float val8 = (alu4?*(data1+alu1+-6):0.0f);
      float val9 = (alu4?*(data1+alu1+-5):0.0f);
      float val10 = (alu4?*(data1+alu1+-4):0.0f);
      float val11 = (alu4?*(data1+alu1+-3):0.0f);
      float val12 = (alu4?*(data1+alu1+-2):0.0f);
      float val13 = (alu4?*(data1+alu1+-1):0.0f);
      float val14 = *(data1+alu1+14);
      float val15 = *(data1+alu1+15);
      float val16 = *(data1+alu1+16);
      float val17 = *(data1+alu1+17);
      float val18 = *(data1+alu1+18);
      float val19 = *(data1+alu1+19);
      float val20 = *(data1+alu1+20);
      float val21 = *(data1+alu1+21);
      float val22 = *(data1+alu1+22);
      float val23 = *(data1+alu1+23);
      float val24 = *(data1+alu1+24);
      float val25 = *(data1+alu1+25);
      float val26 = *(data1+alu1+26);
      float val27 = *(data1+alu1+27);
      float val28 = *(data1+alu1+42);
      float val29 = *(data1+alu1+43);
      float val30 = *(data1+alu1+44);
      float val31 = *(data1+alu1+45);
      float val32 = *(data1+alu1+46);
      float val33 = *(data1+alu1+47);
      float val34 = *(data1+alu1+48);
      float val35 = *(data1+alu1+49);
      float val36 = *(data1+alu1+50);
      float val37 = *(data1+alu1+51);
      float val38 = *(data1+alu1+52);
      float val39 = *(data1+alu1+53);
      float val40 = *(data1+alu1+54);
      float val41 = *(data1+alu1+55);
      float val42 = *(data1+alu1+70);
      float val43 = *(data1+alu1+71);
      float val44 = *(data1+alu1+72);
      float val45 = *(data1+alu1+73);
      float val46 = *(data1+alu1+74);
      float val47 = *(data1+alu1+75);
      float val48 = *(data1+alu1+76);
      float val49 = *(data1+alu1+77);
      float val50 = *(data1+alu1+78);
      float val51 = *(data1+alu1+79);
      float val52 = *(data1+alu1+80);
      float val53 = *(data1+alu1+81);
      float val54 = *(data1+alu1+82);
      float val55 = *(data1+alu1+83);
      float val56 = *(data1+alu1+98);
      float val57 = *(data1+alu1+99);
      float val58 = *(data1+alu1+100);
      float val59 = *(data1+alu1+101);
      float val60 = *(data1+alu1+102);
      float val61 = *(data1+alu1+103);
      float val62 = *(data1+alu1+104);
      float val63 = *(data1+alu1+105);
      float val64 = *(data1+alu1+106);
      float val65 = *(data1+alu1+107);
      float val66 = *(data1+alu1+108);
      float val67 = *(data1+alu1+109);
      float val68 = *(data1+alu1+110);
      float val69 = *(data1+alu1+111);
      float val70 = *(data1+alu1+126);
      float val71 = *(data1+alu1+127);
      float val72 = *(data1+alu1+128);
      float val73 = *(data1+alu1+129);
      float val74 = *(data1+alu1+130);
      float val75 = *(data1+alu1+131);
      float val76 = *(data1+alu1+132);
      float val77 = *(data1+alu1+133);
      float val78 = *(data1+alu1+134);
      float val79 = *(data1+alu1+135);
      float val80 = *(data1+alu1+136);
      float val81 = *(data1+alu1+137);
      float val82 = *(data1+alu1+138);
      float val83 = *(data1+alu1+139);
      float val84 = (alu3?*(data1+alu1+154):0.0f);
      float val85 = (alu3?*(data1+alu1+155):0.0f);
      float val86 = (alu3?*(data1+alu1+156):0.0f);
      float val87 = (alu3?*(data1+alu1+157):0.0f);
      float val88 = (alu3?*(data1+alu1+158):0.0f);
      float val89 = (alu3?*(data1+alu1+159):0.0f);
      float val90 = (alu3?*(data1+alu1+160):0.0f);
      float val91 = (alu3?*(data1+alu1+161):0.0f);
      float val92 = (alu3?*(data1+alu1+162):0.0f);
      float val93 = (alu3?*(data1+alu1+163):0.0f);
      float val94 = (alu3?*(data1+alu1+164):0.0f);
      float val95 = (alu3?*(data1+alu1+165):0.0f);
      float val96 = (alu3?*(data1+alu1+166):0.0f);
      float val97 = (alu3?*(data1+alu1+167):0.0f);
      float val98 = *(data2+alu2+672);
      float val99 = *(data2+alu2+1344);
      float val100 = *(data2+alu2+2016);
      float val101 = *(data2+alu2+2688);
      acc0 = (acc0+(val0*val98)+(val1*val99)+(val2*val100)+(val3*val101));
      acc1 = (acc1+(val14*val98)+(val15*val99)+(val16*val100)+(val17*val101));
      acc2 = (acc2+(val28*val98)+(val29*val99)+(val30*val100)+(val31*val101));
      acc3 = (acc3+(val42*val98)+(val43*val99)+(val44*val100)+(val45*val101));
      acc4 = (acc4+(val56*val98)+(val57*val99)+(val58*val100)+(val59*val101));
      acc5 = (acc5+(val70*val98)+(val71*val99)+(val72*val100)+(val73*val101));
      acc6 = (acc6+(val84*val98)+(val85*val99)+(val86*val100)+(val87*val101));
      float val102 = *(data2+alu2);
      acc7 = (acc7+(val1*val102)+(val2*val98)+(val3*val99)+(val4*val100)+(val5*val101));
      acc8 = (acc8+(val15*val102)+(val16*val98)+(val17*val99)+(val18*val100)+(val19*val101));
      acc9 = (acc9+(val29*val102)+(val30*val98)+(val31*val99)+(val32*val100)+(val33*val101));
      acc10 = (acc10+(val43*val102)+(val44*val98)+(val45*val99)+(val46*val100)+(val47*val101));
      acc11 = (acc11+(val57*val102)+(val58*val98)+(val59*val99)+(val60*val100)+(val61*val101));
      acc12 = (acc12+(val71*val102)+(val72*val98)+(val73*val99)+(val74*val100)+(val75*val101));
      acc13 = (acc13+(val85*val102)+(val86*val98)+(val87*val99)+(val88*val100)+(val89*val101));
      acc14 = (acc14+(val3*val102)+(val4*val98)+(val5*val99)+(val6*val100)+(val7*val101));
      acc15 = (acc15+(val17*val102)+(val18*val98)+(val19*val99)+(val20*val100)+(val21*val101));
      acc16 = (acc16+(val31*val102)+(val32*val98)+(val33*val99)+(val34*val100)+(val35*val101));
      acc17 = (acc17+(val45*val102)+(val46*val98)+(val47*val99)+(val48*val100)+(val49*val101));
      acc18 = (acc18+(val59*val102)+(val60*val98)+(val61*val99)+(val62*val100)+(val63*val101));
      acc19 = (acc19+(val73*val102)+(val74*val98)+(val75*val99)+(val76*val100)+(val77*val101));
      acc20 = (acc20+(val87*val102)+(val88*val98)+(val89*val99)+(val90*val100)+(val91*val101));
      acc21 = (acc21+(val5*val102)+(val6*val98)+(val7*val99)+(val8*val100)+(val9*val101));
      acc22 = (acc22+(val19*val102)+(val20*val98)+(val21*val99)+(val22*val100)+(val23*val101));
      acc23 = (acc23+(val33*val102)+(val34*val98)+(val35*val99)+(val36*val100)+(val37*val101));
      acc24 = (acc24+(val47*val102)+(val48*val98)+(val49*val99)+(val50*val100)+(val51*val101));
      acc25 = (acc25+(val61*val102)+(val62*val98)+(val63*val99)+(val64*val100)+(val65*val101));
      acc26 = (acc26+(val75*val102)+(val76*val98)+(val77*val99)+(val78*val100)+(val79*val101));
      acc27 = (acc27+(val89*val102)+(val90*val98)+(val91*val99)+(val92*val100)+(val93*val101));
      acc28 = (acc28+(val7*val102)+(val8*val98)+(val9*val99)+(val10*val100)+(val11*val101));
      acc29 = (acc29+(val21*val102)+(val22*val98)+(val23*val99)+(val24*val100)+(val25*val101));
      acc30 = (acc30+(val35*val102)+(val36*val98)+(val37*val99)+(val38*val100)+(val39*val101));
      acc31 = (acc31+(val49*val102)+(val50*val98)+(val51*val99)+(val52*val100)+(val53*val101));
      acc32 = (acc32+(val63*val102)+(val64*val98)+(val65*val99)+(val66*val100)+(val67*val101));
      acc33 = (acc33+(val77*val102)+(val78*val98)+(val79*val99)+(val80*val100)+(val81*val101));
      acc34 = (acc34+(val91*val102)+(val92*val98)+(val93*val99)+(val94*val100)+(val95*val101));
      acc35 = (acc35+(val9*val102)+(val10*val98)+(val11*val99)+(val12*val100)+(val13*val101));
      acc36 = (acc36+(val23*val102)+(val24*val98)+(val25*val99)+(val26*val100)+(val27*val101));
      acc37 = (acc37+(val37*val102)+(val38*val98)+(val39*val99)+(val40*val100)+(val41*val101));
      acc38 = (acc38+(val51*val102)+(val52*val98)+(val53*val99)+(val54*val100)+(val55*val101));
      acc39 = (acc39+(val65*val102)+(val66*val98)+(val67*val99)+(val68*val100)+(val69*val101));
      acc40 = (acc40+(val79*val102)+(val80*val98)+(val81*val99)+(val82*val100)+(val83*val101));
      acc41 = (acc41+(val93*val102)+(val94*val98)+(val95*val99)+(val96*val100)+(val97*val101));
      acc42 = (acc42+(val11*val102)+(val12*val98)+(val13*val99));
      acc43 = (acc43+(val25*val102)+(val26*val98)+(val27*val99));
      acc44 = (acc44+(val39*val102)+(val40*val98)+(val41*val99));
      acc45 = (acc45+(val53*val102)+(val54*val98)+(val55*val99));
      acc46 = (acc46+(val67*val102)+(val68*val98)+(val69*val99));
      acc47 = (acc47+(val81*val102)+(val82*val98)+(val83*val99));
      acc48 = (acc48+(val95*val102)+(val96*val98)+(val97*val99));
    }
    float val103 = *(data3+ridx0);
    float val104 = *(data4+ridx0);
    float val105 = *(data5+ridx0);
    float alu5 = __builtin_sqrtf((1/(val105+1e-05f)));
    float val106 = *(data6+ridx0);
    *(data0+alu0+1) = (((acc7-val103)*val104*alu5)+val106);
    *(data0+alu0+2) = (((acc14-val103)*val104*alu5)+val106);
    *(data0+alu0+3) = (((acc21-val103)*val104*alu5)+val106);
    *(data0+alu0+4) = (((acc28-val103)*val104*alu5)+val106);
    *(data0+alu0+5) = (((acc35-val103)*val104*alu5)+val106);
    *(data0+alu0+6) = (((acc42-val103)*val104*alu5)+val106);
    *(data0+alu0+7) = (((acc1-val103)*val104*alu5)+val106);
    *(data0+alu0+8) = (((acc8-val103)*val104*alu5)+val106);
    *(data0+alu0+9) = (((acc15-val103)*val104*alu5)+val106);
    *(data0+alu0+10) = (((acc22-val103)*val104*alu5)+val106);
    *(data0+alu0+11) = (((acc29-val103)*val104*alu5)+val106);
    *(data0+alu0+12) = (((acc36-val103)*val104*alu5)+val106);
    *(data0+alu0+13) = (((acc43-val103)*val104*alu5)+val106);
    *(data0+alu0+14) = (((acc2-val103)*val104*alu5)+val106);
    *(data0+alu0+15) = (((acc9-val103)*val104*alu5)+val106);
    *(data0+alu0+16) = (((acc16-val103)*val104*alu5)+val106);
    *(data0+alu0+17) = (((acc23-val103)*val104*alu5)+val106);
    *(data0+alu0+18) = (((acc30-val103)*val104*alu5)+val106);
    *(data0+alu0+19) = (((acc37-val103)*val104*alu5)+val106);
    *(data0+alu0+20) = (((acc44-val103)*val104*alu5)+val106);
    *(data0+alu0+21) = (((acc3-val103)*val104*alu5)+val106);
    *(data0+alu0+22) = (((acc10-val103)*val104*alu5)+val106);
    *(data0+alu0+23) = (((acc17-val103)*val104*alu5)+val106);
    *(data0+alu0+24) = (((acc24-val103)*val104*alu5)+val106);
    *(data0+alu0+25) = (((acc31-val103)*val104*alu5)+val106);
    *(data0+alu0+26) = (((acc38-val103)*val104*alu5)+val106);
    *(data0+alu0+27) = (((acc45-val103)*val104*alu5)+val106);
    *(data0+alu0+28) = (((acc4-val103)*val104*alu5)+val106);
    *(data0+alu0+29) = (((acc11-val103)*val104*alu5)+val106);
    *(data0+alu0+30) = (((acc18-val103)*val104*alu5)+val106);
    *(data0+alu0+31) = (((acc25-val103)*val104*alu5)+val106);
    *(data0+alu0+32) = (((acc32-val103)*val104*alu5)+val106);
    *(data0+alu0+33) = (((acc39-val103)*val104*alu5)+val106);
    *(data0+alu0+34) = (((acc46-val103)*val104*alu5)+val106);
    *(data0+alu0+35) = (((acc5-val103)*val104*alu5)+val106);
    *(data0+alu0+36) = (((acc12-val103)*val104*alu5)+val106);
    *(data0+alu0+37) = (((acc19-val103)*val104*alu5)+val106);
    *(data0+alu0+38) = (((acc26-val103)*val104*alu5)+val106);
    *(data0+alu0+39) = (((acc33-val103)*val104*alu5)+val106);
    *(data0+alu0+40) = (((acc40-val103)*val104*alu5)+val106);
    *(data0+alu0+41) = (((acc47-val103)*val104*alu5)+val106);
    *(data0+alu0+42) = (((acc6-val103)*val104*alu5)+val106);
    *(data0+alu0+43) = (((acc13-val103)*val104*alu5)+val106);
    *(data0+alu0+44) = (((acc20-val103)*val104*alu5)+val106);
    *(data0+alu0+45) = (((acc27-val103)*val104*alu5)+val106);
    *(data0+alu0+46) = (((acc34-val103)*val104*alu5)+val106);
    *(data0+alu0+47) = (((acc41-val103)*val104*alu5)+val106);
    *(data0+alu0+48) = (((acc48-val103)*val104*alu5)+val106);
    *(data0+alu0) = (((acc0-val103)*val104*alu5)+val106);
  }
}