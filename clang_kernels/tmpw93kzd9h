typedef float float2 __attribute__((aligned(8),vector_size(8)));
typedef float float4 __attribute__((aligned(16),vector_size(16)));
void r_144_28_7_5_4_5(float* restrict data0, float* restrict data1, float* restrict data2, float* restrict data3, float* restrict data4, float* restrict data5, float* restrict data6) {
  float4 cast0 = (float4){0.0f,0.0f,0.0f,0.0f};
  for (int ridx0 = 0; ridx0 < 144; ridx0++) {
    for (int ridx1 = 0; ridx1 < 28; ridx1++) {
      for (int ridx2 = 0; ridx2 < 7; ridx2++) {
        float acc0 = 0.0f;
        float acc1 = 0.0f;
        float acc2 = 0.0f;
        float acc3 = 0.0f;
        for (int ridx3 = 0; ridx3 < 5; ridx3++) {
          int alu0 = ((ridx2<<3)+(ridx0*3136)+(ridx1*112)+(ridx3*56));
          _Bool alu1 = ((((ridx1+ridx3)<1)!=1)&(((ridx1<<1)+ridx3)<57));
          int alu2 = (ridx0+(ridx3*720));
          float val0 = ((alu1&((ridx2<1)!=1))?*(data1+alu0+-57):0.0f);
          float val1 = *(data2+alu2+144);
          float val2 = *(data2+alu2+288);
          float val3 = *(data2+alu2+432);
          float val4 = *(data2+alu2+576);
          float val5 = *(data2+alu2);
          float2 val6 = ((alu1&(ridx2<6))?*((float2*)(data1+alu0+-48)):(float2){0.0f,0.0f});
          float4 val7 = (alu1?*((float4*)(data1+alu0+-56)):cast0);
          acc0 = (acc0+(val0*val5)+(val7[0]*val1)+(val7[1]*val2)+(val7[2]*val3)+(val7[3]*val4));
          float4 val8 = (alu1?*((float4*)(data1+alu0+-52)):cast0);
          acc1 = (acc1+(val7[1]*val5)+(val7[2]*val1)+(val7[3]*val2)+(val8[0]*val3)+(val8[1]*val4));
          acc2 = (acc2+(val7[3]*val5)+(val8[0]*val1)+(val8[1]*val2)+(val8[2]*val3)+(val8[3]*val4));
          acc3 = (acc3+(val8[1]*val5)+(val8[2]*val1)+(val8[3]*val2)+(val6[0]*val3)+(val6[1]*val4));
        }
        float val9 = *(data3+ridx0);
        float val10 = *(data4+ridx0);
        float val11 = *(data5+ridx0);
        float alu3 = __builtin_sqrtf((1/(val11+1e-05f)));
        float val12 = *(data6+ridx0);
        *((float4*)(data0+(ridx0*784)+(ridx1*28)+(ridx2<<2))) = (float4){(((acc0-val9)*val10*alu3)+val12),(((acc1-val9)*val10*alu3)+val12),(((acc2-val9)*val10*alu3)+val12),(((acc3-val9)*val10*alu3)+val12)};
      }
    }
  }
}